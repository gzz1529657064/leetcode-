给出一个整数数组 A 和一个查询数组 queries。

对于第 i 次查询，有 val = queries[i][0], index = queries[i][1]，我们会把 val 加到 A[index] 上。然后，第 i 次查询的答案是 A 中偶数值的和。

（此处给定的 index = queries[i][1] 是从 0 开始的索引，每次查询都会永久修改数组 A。）

返回所有查询的答案。你的答案应当以数组 answer 给出，answer[i] 为第 i 次查询的答案。

示例：
输入：A = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]
输出：[8,6,2,4]
解释：
开始时，数组为 [1,2,3,4]。
将 1 加到 A[0] 上之后，数组为 [2,2,3,4]，偶数值之和为 2 + 2 + 4 = 8。
将 -3 加到 A[1] 上之后，数组为 [2,-1,3,4]，偶数值之和为 2 + 4 = 6。
将 -4 加到 A[0] 上之后，数组为 [-2,-1,3,4]，偶数值之和为 -2 + 4 = 2。
将 2 加到 A[3] 上之后，数组为 [-2,-1,3,6]，偶数值之和为 -2 + 6 = 4。
我的答案:
class Solution:
    def sumEvenAfterQueries(self, A: List[int], queries: List[List[int]]) -> List[int]:
        answer = []
        for i in range(len(A)):
            index = queries[i][1]
            val = queries[i][0]
            A[index] += val
            sum1 = 0
            # for j in A:
            #     if j % 2 == 0:
            #         sum1 += j
            sum1 = sum(x for x in A if x % 2 == 0)
            answer.append(sum1)
        return answer
答案正确：但是超出时间限制
我的思路很简单:先更新A，然后求出A中所有的偶数之和


解法二:(不太好想)
class Solution:
    def sumEvenAfterQueries(self, A: List[int], queries: List[List[int]]) -> List[int]:
        S = sum(x for x in A if x % 2 == 0)
        answer = []
        
        # queries(val, index)
        # x是要加的值，k是索引
        for x, k in queries:
            if A[k] % 2 == 0:
                S -= A[k]
            A[k] += x
            if A[k] % 2 == 0:
                S += A[k]
            answer.append(S)
        return answer
执行用时 : 412 ms, 在Sum of Even Numbers After Queries的Python3提交中击败了1.96% 的用户
内存消耗 : 17.4 MB, 在Sum of Even Numbers After Queries的Python3提交中击败了100.00% 的用户
实际上正确的思路:
先算出A的偶数和S
	如果A[k]是偶数，(A[k]+val)是偶数:
		S = S + val
	如果A[k]是偶数，(A[k]+val)是奇数:
		S = S - A[k]
	如果A[k]是奇数，(A[k]+val)是偶数:
		S = S + A[k] + val
	如果A[k]是奇数，(A[k]+val)是奇数:
		pass
		
class Solution:
    def sumEvenAfterQueries(self, A: List[int], queries: List[List[int]]) -> List[int]:
        # 求偶数之和
        S = sum(x for x in A if x & 1 == 0)
        answer = []
        for i in range(len(A)):
            pre_data = 0
            index = queries[i][1]
            val = queries[i][0]
            pre_data = A[index]
            A[index] = pre_data + val 
            if pre_data & 1 == 0 and A[index] & 1 == 0:
                S = S - pre_data + A[index]
            if pre_data & 1 == 0 and A[index] & 1 == 1:
                S -= pre_data
            if pre_data & 1 == 1 and A[index] & 1 == 0:
                S += A[index]
            answer.append(S)
        return answer

		
	
	
	




